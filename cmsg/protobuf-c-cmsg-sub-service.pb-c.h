/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_protobuf_2dc_2dcmsg_2dsub_2dservice_2eproto_INCLUDED
#define PROTOBUF_C_protobuf_2dc_2dcmsg_2dsub_2dservice_2eproto_INCLUDED

#include <cmsg/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include <string.h>
#include <stdlib.h>

typedef struct _cmsg_sub_entry_transport_info cmsg_sub_entry_transport_info;
typedef struct _cmsg_sub_entry_response cmsg_sub_entry_response;


/* --- enums --- */


/* --- messages --- */

struct  _cmsg_sub_entry_transport_info
{
  ProtobufCMessage base;
  uint32_t add;
  char *method_name;
  uint32_t transport_type;
  protobuf_c_boolean has_in_sin_addr_s_addr;
  uint32_t in_sin_addr_s_addr;
  protobuf_c_boolean has_in_sin_port;
  uint32_t in_sin_port;
  protobuf_c_boolean has_tipc_family;
  uint32_t tipc_family;
  protobuf_c_boolean has_tipc_addrtype;
  uint32_t tipc_addrtype;
  protobuf_c_boolean has_tipc_addr_name_name_type;
  uint32_t tipc_addr_name_name_type;
  protobuf_c_boolean has_tipc_addr_name_name_instance;
  uint32_t tipc_addr_name_name_instance;
  protobuf_c_boolean has_tipc_addr_name_domain;
  uint32_t tipc_addr_name_domain;
  protobuf_c_boolean has_tipc_scope;
  uint32_t tipc_scope;
};
#define CMSG_SUB_ENTRY_TRANSPORT_INFO_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_sub_entry_transport_info_descriptor) \
    , 0, NULL, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _cmsg_sub_entry_response
{
  ProtobufCMessage base;
  int32_t return_value;
};
#define CMSG_SUB_ENTRY_RESPONSE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_sub_entry_response_descriptor) \
    , 0 }


/* cmsg_sub_entry_transport_info methods */
void   cmsg_sub_entry_transport_info_init
                     (cmsg_sub_entry_transport_info         *message);
size_t cmsg_sub_entry_transport_info_get_packed_size
                     (const cmsg_sub_entry_transport_info   *message);
size_t cmsg_sub_entry_transport_info_pack
                     (const cmsg_sub_entry_transport_info   *message,
                      uint8_t             *out);
size_t cmsg_sub_entry_transport_info_pack_to_buffer
                     (const cmsg_sub_entry_transport_info   *message,
                      ProtobufCBuffer     *buffer);
cmsg_sub_entry_transport_info *
       cmsg_sub_entry_transport_info_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_sub_entry_transport_info_free_unpacked
                     (cmsg_sub_entry_transport_info *message,
                      ProtobufCAllocator *allocator);
/* cmsg_sub_entry_response methods */
void   cmsg_sub_entry_response_init
                     (cmsg_sub_entry_response         *message);
size_t cmsg_sub_entry_response_get_packed_size
                     (const cmsg_sub_entry_response   *message);
size_t cmsg_sub_entry_response_pack
                     (const cmsg_sub_entry_response   *message,
                      uint8_t             *out);
size_t cmsg_sub_entry_response_pack_to_buffer
                     (const cmsg_sub_entry_response   *message,
                      ProtobufCBuffer     *buffer);
cmsg_sub_entry_response *
       cmsg_sub_entry_response_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_sub_entry_response_free_unpacked
                     (cmsg_sub_entry_response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*cmsg_sub_entry_transport_info_Closure)
                 (const cmsg_sub_entry_transport_info *message,
                  void *closure_data);
typedef void (*cmsg_sub_entry_response_Closure)
                 (const cmsg_sub_entry_response *message,
                  void *closure_data);

/* --- services --- */

typedef struct _cmsg_sub_service_Service cmsg_sub_service_Service;
struct _cmsg_sub_service_Service
{
  ProtobufCService base;
  int32_t (*subscribe)(cmsg_sub_service_Service *service,
                    const cmsg_sub_entry_transport_info *input,
                    cmsg_sub_entry_response_Closure closure,
                    void *closure_data);
  void *closure;
  void *closure_data;
};
typedef void (*cmsg_sub_service_ServiceDestroy)(cmsg_sub_service_Service *);
void cmsg_sub_service_init (cmsg_sub_service_Service *service,
                             cmsg_sub_service_ServiceDestroy destroy);
#define CMSG_SUB_SERVICE_BASE_INIT \
    { &cmsg_sub_service_descriptor, protobuf_c_service_invoke_internal, NULL }
#define CMSG_SUB_SERVICE_INIT(function_prefix_) \
    { CMSG_SUB_SERVICE_BASE_INIT,\
      function_prefix_ ## subscribe  }
int32_t cmsg_sub_service_subscribe(ProtobufCService *service,
                                   const cmsg_sub_entry_transport_info *input,
                                   cmsg_sub_entry_response_Closure closure,
                                   void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmsg_sub_entry_transport_info_descriptor;
extern const ProtobufCMessageDescriptor cmsg_sub_entry_response_descriptor;
extern const ProtobufCServiceDescriptor cmsg_sub_service_descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_protobuf_2dc_2dcmsg_2dsub_2dservice_2eproto_INCLUDED */

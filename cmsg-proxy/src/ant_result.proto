enum ant_code
{
    // OK is returned on success.
    ANT_CODE_OK = 0;

    // Canceled indicates the operation was cancelled (typically by the caller).
    ANT_CODE_CANCELLED = 1;

    // Unknown error.  An example of where this error may be returned is
    // if a Status value received from another address space belongs to
    // an error-space that is not known in this address space.  Also
    // errors raised by APIs that do not return enough error information
    // may be converted to this error.
    ANT_CODE_UNKNOWN = 2;

    // InvalidArgument indicates client specified an invalid argument.
    // Note that this differs from FailedPrecondition. It indicates arguments
    // that are problematic regardless of the state of the system
    // (e.g., a malformed file name).
    ANT_CODE_INVALID_ARGUMENT = 3;

    // DeadlineExceeded means operation expired before completion.
    // For operations that change the state of the system, this error may be
    // returned even if the operation has completed successfully. For
    // example, a successful response from a server could have been delayed
    // long enough for the deadline to expire.
    ANT_CODE_DEADLINE_EXCEEDED = 4;

    // NotFound means some requested entity (e.g., file or directory) was
    // not found.
    ANT_CODE_NOT_FOUND = 5;

    // AlreadyExists means an attempt to create an entity failed because one
    // already exists.
    ANT_CODE_ALREADY_EXISTS = 6;

    // PermissionDenied indicates the caller does not have permission to
    // execute the specified operation. It must not be used for rejections
    // caused by exhausting some resource (use ResourceExhausted
    // instead for those errors).  It must not be
    // used if the caller cannot be identified (use Unauthenticated
    // instead for those errors).
    ANT_CODE_PERMISSION_DENIED = 7;

    // ResourceExhausted indicates some resource has been exhausted, perhaps
    // a per-user quota, or perhaps the entire file system is out of space.
    ANT_CODE_RESOURCE_EXHAUSTED = 8;

    // FailedPrecondition indicates operation was rejected because the
    // system is not in a state required for the operation's execution.
    ANT_CODE_FAILED_PRECONDITION = 9;

    // Aborted indicates the operation was aborted, typically due to a
    // concurrency issue like sequencer check failures, transaction aborts,
    // etc.
    ANT_CODE_ABORTED = 10;

    // OutOfRange means operation was attempted past the valid range.
    // E.g., seeking or reading past end of file.
    ANT_CODE_OUT_OF_RANGE = 11;

    // Unimplemented indicates operation is not implemented or not
    // supported/enabled in this service.
    ANT_CODE_UNIMPLEMENTED = 12;

    // Internal errors.  Means some invariants expected by underlying
    // system has been broken.  If you see one of these errors,
    // something is very broken.
    ANT_CODE_INTERNAL = 13;

    // Unavailable indicates the service is currently unavailable.
    // This is a most likely a transient condition and may be corrected
    // by retrying with a backoff.
    ANT_CODE_UNAVAILABLE = 14;

    // DataLoss indicates unrecoverable data loss or corruption.
    ANT_CODE_DATALOSS = 15;

    // Unauthenticated indicates the request does not have valid
    // authentication credentials for the operation.
    ANT_CODE_UNAUTHENTICATED = 16;

    // One or more items in a batch operation failed. The "details" field
    // should be examined for more information.
    ANT_CODE_BATCH_PARTIAL_FAIL = 17;
    ANT_CODE_MAX = 18;
}

message ant_result
{
    // Operation error code
    optional ant_code code = 1;

    // Message describing error
    optional string message = 2;

    // ID of resource that this error refers to
    //
    // This field will be set if result object is in the details field, otherwise
    // it is optional.
    optional string resource_id = 3;

    // Array of result objects with details of errors
    //
    // This array of result objects should be checked if code is ANT_CODE_BATCH_PARTIAL_FAIL
    // as it will give details of which parts of a batch operation failed.
    repeated ant_result details = 4;
}

message passthrough_request
{
    optional string path = 1;
    optional string method = 2;
    optional string request_body = 3;
};

message passthrough_response
{
    optional uint32 status_code = 1;
    optional string response_body = 2;
}

// Interface type
// !!! WARNING, WARNING, WARNING !!!
// Types are defined in sort order so be careful when making changes.
// For example running-config is generated in this order.
// So don't re-order or add a new value to the middle of this enum
// unless you know what you are doing.
enum if_hw_type
{
    IF_TYPE_UNKNOWN = 0;      /* We intentionally use UNKNOWN instead of NOT_SET */
    IF_TYPE_PORT = 1;
    IF_TYPE_ETHERNET = 2;
    IF_TYPE_LOOPBACK = 3;
    IF_TYPE_LACP_AGGREGATE = 4;
    IF_TYPE_STAT_AGGREGATE = 5;
    IF_TYPE_VLAN = 6;
    IF_TYPE_MANAGE = 7;
    IF_TYPE_PBB_LOGICAL = 8;
    IF_TYPE_IPIP = 9;
    IF_TYPE_GREIP = 10;
    IF_TYPE_IPV6IP = 11;
    IF_TYPE_6TO4 = 12;
    IF_TYPE_ISATAP = 13;
    IF_TYPE_WAN = 14;
    IF_TYPE_CELLULAR = 15;
    IF_TYPE_FRELAY = 16;
    IF_TYPE_FRELAY_SUBINT = 17;
    IF_TYPE_HDLC = 18;
    IF_TYPE_ATM = 19;
    IF_TYPE_TUNNEL6 = 20;
    IF_TYPE_PSEUDO = 21;
    IF_TYPE_ATL_BRIDGE = 22;
    IF_TYPE_PPP = 23;
    IF_TYPE_GRE6IP = 24;
    IF_TYPE_WWAN = 25;
}
